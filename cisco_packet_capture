#!/usr/bin/env bash

TFTP_SERVER="10.10.100.227"

CISCO_ROUTER="$1"

DIRTY=""

function exitTrap {
	emergencyStop 2>&- &
	echo -n "${NC}"
	unset ACL_DST_IP
	unset ACL_DST_WILDCARD
	unset ACL_SRC_IP
	unset ACL_SRC_WILDCARD
	unset CISCO_ROUTER
	unset DIRTY
	unset INT_COMMAND
	unset INTERFACE
	unset INTERFACE_LIST
	unset INTERFACES
	unset PCAP_FILE
	unset TEMPLATE_ACL
	unset TEMPLATE_REMOVE_BUFFER
	unset TEMPLATE_STOP
	unset TFTP_GET_COMMAND
	unset TFTP_SERVER
}

trap exitTrap EXIT

source colors.sh

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
	echo "${RED}You can't source this file. If you want to pre-cache cisco passwords, run . cisco_command first.${NC}"
	return 1
fi


function ip_validate {
	[[ "$1" =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]] || exit 1
	echo "$1"
}

#ACL_SRC_IP=0.0.0.0
#ACL_SRC_WILDCARD=255.255.255.255
#ACL_DST_IP=0.0.0.0
#ACL_DST_WILDCARD=255.255.255.255

while [ -z "$CISCO_ROUTER" ]; do
	echo -n "Enter hostname/IP of the cisco router: "
	read CISCO_ROUTER
done

PCAP_FILE="CAPTURES/capture-${CISCO_ROUTER}.pcap"

while [ -z "$(ip_validate $ACL_SRC_IP)" ]; do
	echo -n "Enter source IP address: "
	read ACL_SRC_IP
done

while [ -z "$(ip_validate $ACL_SRC_WILDCARD)" ]; do
	echo -n "Enter source WILDCARD [default 0.0.0.0 - single host]: "
	read ACL_SRC_WILDCARD
	[ -z "$ACL_SRC_WILDCARD" ] && ACL_SRC_WILDCARD="0.0.0.0"
done

while [ -z "$(ip_validate $ACL_DST_IP)" ]; do
	echo -n "Enter destination IP address: "
	read ACL_DST_IP
done

while [ -z "$(ip_validate $ACL_DST_WILDCARD)" ]; do
	echo -n "Enter destination WILDCARD [default 0.0.0.0 - single host]': "
	read ACL_DST_WILDCARD
	[ -z "$ACL_DST_WILDCARD" ] && ACL_DST_WILDCARD="0.0.0.0"
done

if [ -z "$CISCO_SHOWRUNN_PASS" ]; then
	if [ ! -t 1 ] || [ ! -t 0 ]; then
		# stdout isn't a terminal
		echo "${RED}There are no cached credentials. Please exit this and run '. cisco_command' alone to pre-cache them."
		echo "Or enter them below for this session only${NC}"
		return 2>&-
		exit 1
	fi
	>&2 echo "If you source this file you credentials will be cached in memory for this shell only"
	>&2 echo -n 'Password: '
	read -s CISCO_SHOWRUNN_PASS
	export CISCO_SHOWRUNN_PASS
	>&2 echo
	>&2 echo -n 'Enable: '
	read -s CISCO_SHOWRUNN_ENABLE
	export CISCO_SHOWRUNN_ENABLE
	>&2 echo
	>&2 echo
fi

export PASS="$CISCO_SHOWRUNN_PASS"
export ENABLE="$CISCO_SHOWRUNN_ENABLE"


INT_COMMAND="show ip interface brief"
INTERFACE_LIST="$(. cisco_command $CISCO_ROUTER $INT_COMMAND | grep -Pv """$INT_COMMAND|NVI0|Embedded-Service-Engine""")"
INTERFACES=$(echo "$INTERFACE_LIST" | grep -Pv 'IP-Address' | awk '{print $1}' | tr '\n' ' ')

echo "$INTERFACE_LIST"
echo
echo "Select capture interface: "
echo -n "${BLUE}"
select INTERFACE in $(echo $INTERFACES); do
	[ -n "$INTERFACE" ] && break
done
echo -n "${NC}"

TEMPLATE_ACL="
permit ip $ACL_SRC_IP $ACL_SRC_WILDCARD $ACL_DST_IP $ACL_DST_WILDCARD
permit ip $ACL_DST_IP $ACL_DST_WILDCARD $ACL_SRC_IP $ACL_SRC_WILDCARD"

TEMPLATE_START="
monitor capture buffer PACKET_CAP size 2048 max-size 4000 circular
conf t
no ip access-list ex PACKET_CAP_FILTER
ip access-list ex PACKET_CAP_FILTER
$TEMPLATE_ACL
end
monitor capture buffer PACKET_CAP filter access-list PACKET_CAP_FILTER
monitor capture point ip cef CAP $INTERFACE both
monitor capture point associate CAP PACKET_CAP
monitor capture point start CAP"

TEMPLATE_STATUS="show monitor capture buffer all parameters"
#"show monitor capture buffer PACKET_CAP"

TEMPLATE_STOP="
monitor capture point stop CAP
no monitor capture point ip cef CAP $INTERFACE both
conf t
no ip access-list ex PACKET_CAP_FILTER
end"

TEMPLATE_REMOVE_BUFFER="no monitor capture buffer PACKET_CAP"

TEMPLATE_TRANSFER="
monitor capture buffer PACKET_CAP export tftp://$TFTP_SERVER/$PCAP_FILE
$TEMPLATE_REMOVE_BUFFER
"

TEMPLATE_EMERGENCY_STOP="
$TEMPLATE_STOP
$TEMPLATE_REMOVE_BUFFER
"

TFTP_GET_COMMAND="get $PCAP_FILE /tmp/$(basename "$PCAP_FILE")
quit"

function startCapture {
	echo "${GREEN}Starting Capture${NC}"
	echo "$TEMPLATE_START" | . cisco_command "$CISCO_ROUTER"
}

function statusWait {
	while ! read -t 1; do
		echo -n "${GREEN}"
		echo "$TEMPLATE_STATUS" | . cisco_command "$CISCO_ROUTER"
		echo "${LGREEN}Capturing. Press ENTER to stop.${NC}"
		sleep 1
	done
}

function stopCapture {
	echo "${RED}Stopping capture${NC}"
	echo "$TEMPLATE_STOP" | . cisco_command "$CISCO_ROUTER"
	echo "${GREEN}Transferring capture file $PCAP_FILE to tftp server $TFTP_SERVER"
	echo "$TEMPLATE_TRANSFER" | . cisco_command "$CISCO_ROUTER"
}

function getFile {
	echo "${GREEN}Transferring capture file $PCAP_FILE from tftp server to local machine${NC}"
	tftp $TFTP_SERVER <<< $TFTP_GET_COMMAND
}

function openWireshark {
	wireshark /tmp/$(basename "$PCAP_FILE") &
}

function emergencyStop {
	if [ -n "$DIRTY" ]; then
		echo "${RED}Attempting Emergency cleanup in the backgroud.${LRED}"
	 	echo "$TEMPLATE_EMERGENCY_STOP" | . cisco_command "$CISCO_ROUTER"
		echo "${GREEN}Completed. Check output in light red for problems during cleanup.${NC}"
	fi
}


# Let the EXIT trap know that we will need to clean up the router
DIRTY=true


# Start the capture
startCapture

# Show capture status repetitively and offering to stop
statusWait

# Stop the capture and send the file to the tftp server
stopCapture

# Let the EXIT trap know that we've already cleaned up
DIRTY=""

getFile
openWireshark
echo "${GREEN}Capture completed${NC}"
