#!/usr/bin/env bash

TARGET=/usr/local/bin

if [ ! -d $TARGET ]; then
	echo $TARGET does not exist. Exiting!
	exit
fi

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

UPDATE="sudo git -C '$DIR' pull"

shopt -s extglob #Enable glob exclusions

function makeCommands {
	for FILE in $(ls "$DIR"); do
		[ "$FILE" != "README.md" ] && \
		[ "$FILE" != "LICENSE" ] && \
		[ ! -e "$TARGET/$FILE" ] && \
		echo "${CMD}sudo ln -f -s '$DIR/$FILE' '$TARGET/$FILE'"$'\n'
	done
}

function run {
	local PULL=$1
	echo "I am going to execute the following commands:"
	[ "$PULL" ] && echo "$UPDATE"
	echo "$CMD"
	GO=""
	while [[ ! "$GO" =~ ^(y|n)$ ]]; do
		[ "$PULL" ] && echo -n "Update and "
		echo -n "Install? (y/n): "
		read GO
	done
	[ "$GO" != "y" ] && echo "You entered '$GO'. Exiting install..." && exit
	[ "$PULL" ] && echo "Updating..."
	[ "$PULL" ] && echo "$UPDATE" | bash
	echo "Installing..."
	echo "$CMD" | bash
}

CMD=$(makeCommands)
run pull
CMD=$(makeCommands)
[ -z "$CMD" ] || run
