#!/usr/bin/env bash

CONNECT_TIMEOUT=2
PROCESSES=256
SCRIPT="$(basename "$0")"

PROTOCOL="http"
REGEX="."
URL_PATH="/"

function help() {
	cat <<-EOF

		$SCRIPT scans http server for particular regex in their response (headers or body)
		$SCRIPT [-s|--https]
		        [-p|--port <port>]
		        [-t|--timeout <timeout_seconds>]
		        [-r|--regex <regex>]
		        [-u|--url_path <url_path>]
		        [--processes <processes>]
						[-o|--sort]
	
		Usage example:
		  $SCRIPT --https --port 8006 --timeout 4 --regex 'pve-api-daemon' --url_path '/' --processes 32 192.168.0.15
		  $SCRIPT -s 192.168.0.0/24
			$SCRIPT -p 8080 192.168.1.10 192.168.2.10 192.168.3.0/28

	EOF
	exit 1
}

function cidr_validate {
	CIDR=$1
	[[ "$CIDR" =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))(/(3[0-2]|[1-2]?[0-9]))?$ ]] || return 1
	echo $CIDR
}

function check_ip {
	local IP="$1"
	while read LINE; do
		echo $LINE
		break
	done < <(timeout $CONNECT_TIMEOUT curl -s -k -D - --connect-timeout $CONNECT_TIMEOUT "$PROTOCOL://$IP:$PORT$URL_PATH" 2>&1 | grep -qP "$REGEX" && echo $IP)
}

function cidr_to_ips {
	local SUBNET="$1"
	sipcalc "$SUBNET" -s32 | awk '/Network/{print $NF}' | tr '\n' ' '
}

[ -z $(command -v sipcalc) ] && echo "$SCRIPT requires sipcalc" | colorize red . && exit 1

POSITIONAL=()
while [[ $# -gt 0 ]]; do
	key="$1"

	case $key in
		-t|--timeout)
		CONNECT_TIMEOUT="$2"
		shift # past argument
		shift # past value
		;;
		-r|--regex)
		REGEX="$2"
		shift # past argument
		shift # past value
		;;
		-p|--port)
		PORT="$2"
		shift # past argument
		shift # past value
		;;
		-u|--url_path)
		URL_PATH="$2"
		shift # past argument
		shift # past value
		;;
		--processes)
		PROCESSES="$2"
		shift # past argument
		shift # past value
		;;
		-s|--https)
		PROTOCOL="https"
		shift # past argument
		;;
		-o|--sort)
		SORT="YES"
		shift # past argument
		;;
		*)    # unknown option
		POSITIONAL+=("$1") # save it in an array for later
		shift # past argument
		;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters


[ "$PROTOCOL" == "https" ] && [ -z "$PORT" ] && PORT="443"
[ "$PROTOCOL" == "http" ] && [ -z "$PORT" ] && PORT="80"

export -f check_ip
export CONNECT_TIMEOUT
export PROTOCOL
export PORT
export URL_PATH
export REGEX

[ -t 1 ] && TERMINAL="yes" || TERMINAL=""

[ -z "$*" ] && help

for SUBNET in $*; do
	if [ -z $(cidr_validate $SUBNET) ]; then
		echo
		echo "$SUBNET is not a valid IP or CIDR notation subnet. Exiting..." | colorize red .
		help
	else
		IPS+="$(cidr_to_ips $SUBNET)"
	fi
done

IPS=$(echo "${IPS[@]}" | tr ' ' '\n' | sort -Vu | tr '\n' ' ')

SWITCHES=()
COUNT=0
while read SWITCH; do
	((COUNT++))
	[ -z "$SORT" ] && [ -n "$TERMINAL" ] && printf '\r' >&2
	[ -z "$SORT" ] && echo $SWITCH
	[ -n "$TERMINAL" ] && printf '\r%s' "FOUND: $COUNT" | colorize green '[0-9]+' >&2
	SWITCHES+=($SWITCH)
done < <(xargs -d ' ' -L1 -P$PROCESSES bash -c 'check_ip "$@"' {} <<< $IPS)
[ -n "$TERMINAL" ] && printf '\r' >&2

[ $COUNT -gt 0 ] && [ -n "$SORT" ] && printf '%s\n' "${SWITCHES[@]}" | sort -Vu 
[ $COUNT -gt 0 ] && [ -n "$TERMINAL" ] && echo "FOUND: $COUNT" | colorize green '[0-9]+' >&2
