#!/usr/bin/env bash

CONNECT_TIMEOUT=5
PROCESSES=256
SCRIPT="$(basename "$0")"

REGEX="."

SNMP_RO_COMMUNITY="public"
[ -n "$(command -v pktools_vars)" ]    && source pktools_vars
[ -n "$(command -v isctools_common)" ] && source isctools_common

function help() {
	cat <<-EOF

		$SCRIPT scans snmp device for particular regex in their response
		$SCRIPT [-c|--community]
		        [-t|--timeout <timeout_seconds>]
		        [-r|--regex <regex>]
		        [-o|--oid <snmp_oid>]
		        [--processes <processes>]
		        [-n|--unsorted]
	
		Usage example:
		  $SCRIPT --community public --timeout 4 --regex '[Aa]ruba' --oid '1.3.6.1.2.1.1.1.0' --processes 32 192.168.0.0/24
			$SCRIPT -c public -o 1.3.6.1.2.1.1.1.0 192.168.1.10 192.168.2.10 192.168.3.0/28

	EOF
	exit 1
}

function cidr_validate {
	CIDR=$1
	[[ "$CIDR" =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))(/(3[0-2]|[1-2]?[0-9]))?$ ]] || return 1
	echo $CIDR
}

function check_ip {
	local IP="$1"
	echo $IP >> /tmp/log
	while read LINE; do
		echo $LINE
		break
	done < <(timeout $CONNECT_TIMEOUT snmpwalk -v$SNMP_VERSION -On -c $SNMP_RO_COMMUNITY $IP $OID 2>/dev/null | grep -v 'No Such Object available on this agent at this OID' | grep -qP "$REGEX" && echo $IP)
}

function cidr_to_ips {
	local SUBNET="$1"
	sipcalc "$SUBNET" -s32 | awk '/Network/{print $NF}' | tr '\n' ' '
}

[ -z "$(command -v sipcalc)" ] && echo "$SCRIPT requires sipcalc" | colorize red . && exit 1

SORT="yes"
SNMP_VERSION="2c"

POSITIONAL=()
while [[ $# -gt 0 ]]; do
	key="$1"

	case $key in
		-t|--timeout)
		CONNECT_TIMEOUT="$2"
		shift # past argument
		shift # past value
		;;
		-r|--regex)
		REGEX="$2"
		shift # past argument
		shift # past value
		;;
		-o|--oid)
		OID="$2"
		shift # past argument
		shift # past value
		;;
		-c|--community)
		SNMP_RO_COMMUNITY="$2"
		shift # past argument
		shift # past value
		;;
		-v|--version)
		SNMP_VERSION="$2"
		shift # past argument
		shift # past value
		;;
		--processes)
		PROCESSES="$2"
		shift # past argument
		shift # past value
		;;
		-n|--unsorted)
		SORT=""
		shift # past argument
		;;
		*)    # unknown option
		POSITIONAL+=("$1") # save it in an array for later
		shift # past argument
		;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters


export -f check_ip
export CONNECT_TIMEOUT
export SNMP_RO_COMMUNITY
export SNMP_VERSION
export OID
export REGEX

[ -t 1 ] && TERMINAL="yes" || TERMINAL=""

[ -z "$*" ] && help

for SUBNET in $*; do
	if [ -z $(cidr_validate $SUBNET) ]; then
		echo
		echo "$SUBNET is not a valid IP or CIDR notation subnet. Exiting..." | colorize red .
		help
	else
		IPS+="$(cidr_to_ips $SUBNET)"
	fi
done

IPS=$(echo "${IPS[@]}" | tr ' ' '\n' | sort -Vu | tr '\n' ' ')

HOSTS=()
HOST=""

COUNT=0
while read HOST; do
	((COUNT++))
	[ -z "$SORT" ] && [ -n "$TERMINAL" ] && printf '\r' >&2
	[ -z "$SORT" ] && echo $HOST
	[ -n "$TERMINAL" ] && printf '\r%s' "FOUND: $COUNT" | colorize green '[0-9]+' >&2
	HOSTS+=($HOST)
done < <(xargs -d ' ' -L1 -P$PROCESSES bash -c 'check_ip "$@"' {} <<< $IPS)
[ -n "$TERMINAL" ] && printf '\r' >&2

[ $COUNT -gt 0 ] && [ -n "$SORT" ] && printf '%s\n' "${HOSTS[@]}" | sort -Vu 
[ $COUNT -gt 0 ] && [ -n "$TERMINAL" ] && echo "FOUND: $COUNT" | colorize green '[0-9]+' >&2
